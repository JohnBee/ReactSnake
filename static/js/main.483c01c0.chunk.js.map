{"version":3,"sources":["logo.svg","components/GridWorld.js","components/Snake.js","components/Instructions.js","App.js","reportWebVitals.js","index.js"],"names":["displayWorld","snakeBody","foodPos","worldWidth","worldHeight","out","blockSizeW","blockSizeH","colourRange","length","b","style","position","width","height","left","top","backgroundColor","push","className","foodStyle","GridWorld","props","Snake","useState","getInitSnakeBody","setSnakeBody","snakeDirection","setSnakeDirection","placeFood","setFoodPos","score","setScore","hiscore","setHiscore","play","setPlay","allPossible","y","x","onlyPossible","filter","coord","list","i","checkCoordinate","Math","round","random","moveSnake","head","next","prev","slice","isGameOver","useEffect","intervalId","setInterval","clearInterval","onKeyDown","key","k","toUpperCase","tabIndex","Instructions","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.483c01c0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\n\r\nexport function checkCoordinate(coord, list){\r\n    for(let i = 0; i < list.length; i++){\r\n        if(coord[0] === list[i][0] && coord[1] === list[i][1]){\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nfunction displayWorld(snakeBody, foodPos, worldWidth, worldHeight){\r\n    let out = [];\r\n    const blockSizeW = (100/worldWidth);\r\n    const blockSizeH = (100/worldHeight);\r\n    const colourRange = 360/snakeBody.length;\r\n    for(let b = 0; b < snakeBody.length; b++){\r\n        // \"rgb(\" + (snakeColour[0]/snakeBody.length * b + 10)+ \",\" + (snakeColour[1]/snakeBody.length * b + 10) + \", \"+ (snakeColour[2]/snakeBody.length * b + 10) + \")\",\r\n        const style = {\r\n            position: \"absolute\",\r\n            width: blockSizeW + \"%\",\r\n            height: blockSizeH +\"%\",\r\n            left: snakeBody[b][0]*blockSizeW+ '%',\r\n            top: snakeBody[b][1]*blockSizeH+ '%',\r\n            backgroundColor: \"hsl(\" + ((colourRange * (snakeBody.length - b - 1))) + \", 100%, 50%)\",\r\n\r\n        }\r\n        if(b !== snakeBody.length -1 ){\r\n            out.push(<div style={style} key={b} className=\"Tile Snake\"></div>);\r\n        }\r\n        else {\r\n            out.push(<div style={style} key={b} className=\"Tile Head\"></div>);\r\n        }\r\n    }\r\n    const foodStyle = {\r\n        position: \"absolute\",\r\n        width: (100/worldWidth) + \"%\",\r\n        height: (100/worldWidth) +\"%\",\r\n        left: foodPos[0]*(100/worldWidth) + '%',\r\n        top: foodPos[1]*(100/worldWidth) + '%',\r\n    }\r\n    out.push(<div style={foodStyle} key=\"food\" className=\"Tile Food\"></div>);\r\n    return out;\r\n}\r\n\r\n\r\n\r\nexport function GridWorld(props){\r\n    return(\r\n        <div className=\"GridWorld\">\r\n            { displayWorld(props.snakeBody, props.foodPos, props.worldWidth, props.worldHeight) }\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { GridWorld, checkCoordinate } from \"./GridWorld\";\r\n\r\nexport function Snake(props){\r\n\r\n    const [worldHeight, worldWidth] = [20, 20];\r\n\r\n\r\n    const [snakeBody, setSnakeBody] = useState(getInitSnakeBody());\r\n    const [snakeDirection, setSnakeDirection] = useState(0);\r\n    const [foodPos, setFoodPos] = useState(placeFood());\r\n    const [score, setScore] = useState(0);\r\n    const [hiscore, setHiscore] = useState(0);\r\n    const [play, setPlay] = useState(false);\r\n\r\n    function getInitSnakeBody(){\r\n        let out = [[worldWidth/2-2,worldHeight/2],[worldWidth/2-1,worldHeight/2],[worldWidth/2, worldHeight/2]];\r\n        return out;\r\n    }\r\n\r\n    function gameOver(){\r\n        if(score > hiscore){\r\n            setHiscore(score);\r\n        }\r\n        setPlay(false);\r\n        setScore(0);\r\n        setSnakeBody([[],...getInitSnakeBody()]);\r\n        setSnakeDirection(0);\r\n        setFoodPos(placeFood());\r\n\r\n    }\r\n    function isGameOver(){\r\n        let head = snakeBody[snakeBody.length - 1];\r\n        for(let i = 0; i < snakeBody.length - 1; i++){\r\n            if(snakeBody[i][0] === head[0] && snakeBody[i][1] === head[1]){\r\n                return true;\r\n            }\r\n        }\r\n        if(head[0] >= worldWidth || head[1] >= worldHeight){\r\n            return true;\r\n        }\r\n        if(head[0] < 0 || head[1] < 0){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function placeFood(){\r\n        let allPossible = [];\r\n        for(let y = 0; y < worldHeight; y++){\r\n            for(let x = 0; x < worldWidth; x++){\r\n                allPossible.push([x, y]);\r\n            }\r\n        }\r\n        let onlyPossible = allPossible.filter( coord => (checkCoordinate(coord, snakeBody) === -1) );\r\n        let x = onlyPossible[Math.round(Math.random()*onlyPossible.length)]\r\n        //console.log(Math.random(onlyPossible.length));\r\n        return x;\r\n    }\r\n\r\n    function moveSnake(){\r\n        let head = snakeBody[snakeBody.length - 1];\r\n        let next = [0, 0];\r\n        switch(snakeDirection){\r\n            case(0): next = [head[0]+1, head[1]];\r\n            break;\r\n            case(1): next = [head[0], head[1]+1];\r\n            break;\r\n            case(2): next = [head[0]-1, head[1]];\r\n            break;\r\n            case(3): next = [head[0], head[1]-1];\r\n            break;\r\n            default: break;\r\n        }\r\n        setSnakeBody((prev) => [...prev, next]);\r\n        if(next[0]===foodPos[0] && next[1]===foodPos[1]){\r\n            setFoodPos(placeFood());\r\n            setScore(prev => prev + 1);\r\n        }\r\n        else {\r\n            setSnakeBody((prev) => prev.slice(1));\r\n        }\r\n\r\n    }\r\n    function onKeyPress(key){\r\n        let k = key.key.toUpperCase();\r\n\r\n        if(k === \"W\" && snakeDirection !== 1){\r\n            setSnakeDirection(3);\r\n        }\r\n        if(k === \"A\"  && snakeDirection !== 0){\r\n            setSnakeDirection(2);\r\n        }\r\n        if(k === \"S\" && snakeDirection !== 3){\r\n            setSnakeDirection(1);\r\n        }\r\n        if(k === \"D\"  && snakeDirection !== 2){\r\n            setSnakeDirection(0);\r\n        }\r\n        if(k===\" \"){\r\n            setPlay(true);\r\n        }\r\n    }\r\n\r\n    if(isGameOver()){\r\n        gameOver();\r\n    }\r\n\r\n    useEffect(\r\n        () => {\r\n            if(play){\r\n                const intervalId = setInterval(moveSnake, 60);\r\n                return () => clearInterval(intervalId);\r\n            }\r\n        }\r\n    ,[snakeBody, play]);\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"Snake\" onKeyDown={onKeyPress} tabIndex={-1}>\r\n            <h2>Hiscore: {hiscore}</h2>\r\n            <h1>Score: {score}</h1>\r\n            <GridWorld snakeBody={snakeBody} foodPos={foodPos} worldHeight={worldHeight} worldWidth={worldWidth}/>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport function Instructions(){\r\n    return(\r\n        <div className=\"Instructions\">\r\n            <h2>How To Play</h2>\r\n            <p>Press SPACE to Start</p>\r\n            <p>W A S D to move Snake</p>\r\n        </div>\r\n    );\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport { Snake } from './components/Snake';\nimport { Instructions } from './components/Instructions';\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Snake />\n        <Instructions />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}